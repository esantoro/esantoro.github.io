<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Emacs | Emanuele Santoro]]></title>
  <link href="http://esantoro.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://esantoro.github.io/"/>
  <updated>2015-11-16T13:36:58+01:00</updated>
  <id>http://esantoro.github.io/</id>
  <author>
    <name><![CDATA[Emanuele Santoro]]></name>
    <email><![CDATA[manu@santoro.tk]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rapid Code Iteration With GNU Emacs]]></title>
    <link href="http://esantoro.github.io/blog/2015/11/15/rapid-code-iteration-with-gnu-emacs/"/>
    <updated>2015-11-15T09:01:13+01:00</updated>
    <id>http://esantoro.github.io/blog/2015/11/15/rapid-code-iteration-with-gnu-emacs</id>
    <content type="html"><![CDATA[<h3>The problem</h3>

<p>In this post I&rsquo;m going to show a quick hack to speed script writing with GNU Emacs.</p>

<p>When writing some little script (quick and dirty scripts in particular), you
often are in a <em>write-run-repeat</em> cycle, in which you write some code, see if
it works as you expected, and then proceed writing the next piece of code.</p>

<p>If you&rsquo;re using GNU Emacs, the simplest approach would be to use a shell in
another window (&ldquo;window&rdquo; according to the Emacs terminology) and switch back and
forth from the code to the shell.</p>

<p>A better approach would be to press a couple of keys and have Emacs to run your
code and show results back to you. That is what I implemented.</p>

<h3>Other solutions</h3>

<p>By I found <a href="http://ergoemacs.org/emacs/elisp_run_current_file.html">this</a>
solution from the <a href="http://ergoemacs.org">ergoemacs.org</a> website.</p>

<p>It&rsquo;s nice and a little more general than I needed, and it has to be updated
for every new language you might want to run.</p>

<p>This does not fit so nicely in an Unix environment, in particular for scripts
authoring: as long as your <em>she-bang</em> is okay and your <code>PATH</code>s are okay, you
should be just fine.</p>

<h3>My solution</h3>

<p>So my solution is to just save the file, mark it as executable, run it saving the output in a buffer, calling <code>view-mode</code> on that buffer and <code>switch-buffer</code> to it.</p>

<p>The best thing about this is leveraging on Emacs' <code>view-mode</code>: after inspecting
the output of your script, you can just press <code>q</code> to exit the buffer and go
back to the source.</p>

<h3>The code</h3>

<p>Here is the code, directly from my <code>~/.emacs</code>:</p>

<p><figure class='code'><figcaption><span>run-current-buffer function </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defun</span> <span class="nv">run-current-buffer</span> <span class="p">()</span>
</span><span class='line'>  <span class="nv">&amp;ldquo</span><span class="c1">;Saves the current buffer, executes it and gets the output in another buffer&amp;rdquo;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">null</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">))</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">buffer-modified-p</span><span class="p">)</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span>
</span><span class='line'>      <span class="p">((</span><span class="nv">output-buffer-name</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">&amp;ldquo</span><span class="c1">;&lt;em&gt;Output: &amp;rdquo; (buffer-name)  &amp;ldquo; &lt;/em&gt;&amp;rdquo;)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">shell-command</span> <span class="p">(</span><span class="nv">concat</span> <span class="nv">&amp;ldquo</span><span class="c1">;chmod +x &amp;rdquo; (buffer-file-name)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">shell-command</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">)</span> <span class="nv">output-buffer-name</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">output-buffer-name</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">view-mode</span><span class="p">))))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="nv">&amp;ldquo</span><span class="c1">;&lt;s-return&gt;&amp;rdquo;) &amp;lsquo;run-current-buffer)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
