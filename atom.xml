<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Emanuele Santoro]]></title>
  <link href="http://esantoro.github.io/atom.xml" rel="self"/>
  <link href="http://esantoro.github.io/"/>
  <updated>2015-12-24T05:45:57+01:00</updated>
  <id>http://esantoro.github.io/</id>
  <author>
    <name><![CDATA[Emanuele Santoro]]></name>
    <email><![CDATA[manu@santoro.tk]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Goals for 2016]]></title>
    <link href="http://esantoro.github.io/blog/2015/12/24/my-goals-for-2016/"/>
    <updated>2015-12-24T04:40:34+01:00</updated>
    <id>http://esantoro.github.io/blog/2015/12/24/my-goals-for-2016</id>
    <content type="html"><![CDATA[<p>In this post I want to take notes of some ideas and goals I have
for 2016.</p>

<h3>Stuff I want to do</h3>

<ul>
<li>Go to a gym</li>
<li>Lose some weight</li>
<li>Get an internship</li>
<li>Learn and use the GTD method</li>
<li>improve/rebuild my blog (probably switch to octopress definitively)</li>
<li>learn systemd (i guess I&rsquo;ll have to deal with this)</li>
</ul>


<h3>Books i want to read</h3>

<p>In this category I want to list individual books as well as
interesting lists I&rsquo;ve found on the Internet.
Books are listed in no particular order.</p>

<ul>
<li><a href="http://i.imgur.com/K1Cl3ke.jpg">/lit/&rsquo;s top 100 books list</a></li>
<li><a href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs">Structure and Implementation of Computer Programs</a></li>
<li><a href="http://www.amazon.com/Learning-PostgreSQL-Salahaldin-Juba/dp/1783989181?tag=duckduckgo-d-20">Learning PostgreSQL</a></li>
<li><a href="https://pragprog.com/book/tpdsl/language-implementation-patterns">Language Implementation Patterns</a></li>
<li><a href="http://healthyprog.com/">The Healthy Programmer</a></li>
<li><a href="http://eu.wiley.com/WileyCDA/WileyTitle/productCd-EHEP002900.html">Algorithms and Data Structures in Java</a></li>
<li><a href="https://psg.com/~dlamkins/sl/">Successful Lisp</a> or <a href="http://www.barnesandnoble.com/w/ansi-common-lisp-paul-graham/1100503034;jsessionid=8FC454CD6F6DA5D39CDE81FDE37E87A0.prodny_store01-atgap07?ean=9780133708752&amp;st=SEM&amp;sid=BNB_DRS_Summer15%20HV%20106%20A_00000000&amp;2sid=Bing_NON_e&amp;sourceId=SEBiS68694190">ANSI Common Lisp</a></li>
<li><a href="https://en.wikipedia.org/wiki/Getting_Things_Done">Getting things done</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Am Trying Octopress]]></title>
    <link href="http://esantoro.github.io/blog/2015/11/18/trying-octopress/"/>
    <updated>2015-11-18T17:10:12+01:00</updated>
    <id>http://esantoro.github.io/blog/2015/11/18/trying-octopress</id>
    <content type="html"><![CDATA[<p>I am trying Octopress. I was convinced in doind so by viewing
<a href="http://www.jesshamrick.com/">Jessica Hamrick</a>&rsquo;s website.</p>

<p>I have been using Emacs and Org-Mode to create my previous website but
it poses some problems when trying to define a visual aspect different
from the standard one.</p>

<p>I am not yet 100% sure I want to make the switch, and I might keep
some parts of the website as org-generated documents anyway (did I
tell you how cool is org-capture?).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rapid Code Iteration With GNU Emacs]]></title>
    <link href="http://esantoro.github.io/blog/2015/11/15/rapid-code-iteration-with-gnu-emacs/"/>
    <updated>2015-11-15T09:01:13+01:00</updated>
    <id>http://esantoro.github.io/blog/2015/11/15/rapid-code-iteration-with-gnu-emacs</id>
    <content type="html"><![CDATA[<h3>The problem</h3>

<p>In this post I&rsquo;m going to show a quick hack to speed script writing with GNU Emacs.</p>

<p>When writing some little script (quick and dirty scripts in particular), you
often are in a <em>write-run-repeat</em> cycle, in which you write some code, see if
it works as you expected, and then proceed writing the next piece of code.</p>

<p>If you&rsquo;re using GNU Emacs, the simplest approach would be to use a shell in
another window (&ldquo;window&rdquo; according to the Emacs terminology) and switch back and
forth from the code to the shell.</p>

<p>A better approach would be to press a couple of keys and have Emacs to run your
code and show results back to you. That is what I implemented.</p>

<h3>Other solutions</h3>

<p>By I found <a href="http://ergoemacs.org/emacs/elisp_run_current_file.html">this</a>
solution from the <a href="http://ergoemacs.org">ergoemacs.org</a> website.</p>

<p>It&rsquo;s nice and a little more general than I needed, and it has to be updated
for every new language you might want to run.</p>

<p>This does not fit so nicely in an Unix environment, in particular for scripts
authoring: as long as your <em>she-bang</em> is okay and your <code>PATH</code>s are okay, you
should be just fine.</p>

<h3>My solution</h3>

<p>So my solution is to just save the file, mark it as executable, run it saving the output in a buffer, calling <code>view-mode</code> on that buffer and <code>switch-buffer</code> to it.</p>

<p>The best thing about this is leveraging on Emacs' <code>view-mode</code>: after inspecting
the output of your script, you can just press <code>q</code> to exit the buffer and go
back to the source.</p>

<h3>The code</h3>

<p>Here is the code, directly from my <code>~/.emacs</code>:</p>

<figure class='code'><figcaption><span>run-current-buffer function </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">run-current-buffer</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Saves the current buffer, executes it and gets the output in another buffer&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">null</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">))</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">buffer-modified-p</span><span class="p">)</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span>
</span><span class='line'>      <span class="p">((</span><span class="nv">output-buffer-name</span> <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot;*Output: &quot;</span> <span class="p">(</span><span class="nv">buffer-name</span><span class="p">)</span>  <span class="s">&quot; *&quot;</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">shell-command</span> <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot;chmod +x &quot;</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">shell-command</span> <span class="p">(</span><span class="nv">buffer-file-name</span><span class="p">)</span> <span class="nv">output-buffer-name</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">switch-to-buffer</span> <span class="nv">output-buffer-name</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">view-mode</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;&lt;s-return&gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;run-current-buffer</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Am Trying Octopress]]></title>
    <link href="http://esantoro.github.io/blog/2015/11/15/i-am-trying-octopress/"/>
    <updated>2015-11-15T08:40:47+01:00</updated>
    <id>http://esantoro.github.io/blog/2015/11/15/i-am-trying-octopress</id>
    <content type="html"><![CDATA[<p>Tap tap tap. <strong>cough</strong>. This is only a test.</p>
]]></content>
  </entry>
  
</feed>
